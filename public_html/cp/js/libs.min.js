/* 
 * AjaxPageParser jQuery Plugin
 * Made by Erik Terwan
 * 28 September 2015 - 0.1.3
 * 
 * This plugin is provided as-is and released under the terms of the MIT license.
 */
 
!function(t){t.fn.pageParser=function(e){function i(){if(u.each(function(e){var i=t(this);t(this).attr("data-ppid",e+1),t(this).on(a.trigger,function(t){return n(i),t.preventDefault(),!1})}),null!=a.initialElement&&a.dynamicUrl){l=!0;var e=t(a.initialElement).attr(a.urlAttribute),i={name:e,page:document.title,id:t(a.initialElement).attr("data-ppid")};history.pushState(i,document.title,e)}return t(window).on("popstate",function(){history.state&&(l&&0!=r?t("*[data-ppid="+history.state.id+"]").length>0&&n(t("*[data-ppid="+history.state.id+"]"),!0):r=1)}),u}function n(e,i){a.before.call(e);var n=e.attr(a.urlAttribute),r=n,l=e.attr("data-ppid");null!=a.parseElement&&(r+=" "+a.parseElement),setTimeout(function(){t(a.container).load(r,function(t,u,o){if("success"==u){var s=t.split("title>");s=s[1].split("</");var c=s[0];if(a.dynamicUrl&&1!=i){var d={name:r,page:c,id:l};history.pushState(d,c,n)}a.setTitle&&(document.title=c),a.finished.call(e)}else"error"==u&&a.error.call(o.status)})},a.loadDelay)}var a=t.extend({container:null,dynamicUrl:!0,initialElement:null,parseElement:null,setTitle:!0,trigger:"click",urlAttribute:"href",loadDelay:null,before:function(){},finished:function(){},error:function(){}},e),r=0,l=!1,u=this;return i()}}(jQuery);
/**
 * SVG Fixer
 *
 * Fixes references to inline SVG elements when the <base> tag is in use.
 * Firefox won't display SVG icons referenced with
 * `<svg><use xlink:href="#id-of-icon-def"></use></svg>` when the <base> tag is on the page.
 *
 * More info:
 * - http://stackoverflow.com/a/18265336/796152
 * - http://www.w3.org/TR/SVG/linking.html
 *
 * One would think that setting the `xml:base` attribute fixes things,
 * but that is being removed from the platform: https://code.google.com/p/chromium/issues/detail?id=341854
 */

(function(document, window) {
    "use strict";

    /**
    * Initialize the SVG Fixer after the DOM is ready
    */
    document.addEventListener("DOMContentLoaded", function() {

        /**
         * Current URL, without the hash
         */
        var baseUrl = window.location.href
            .replace(window.location.hash, "");

        /**
        *  Find all `use` elements with a namespaced `href` attribute, e.g.
        *  <use xlink:href="#some-id"></use>
        *
        *  See: http://stackoverflow.com/a/23047888/796152
        */
        [].slice.call(document.querySelectorAll("use[*|href]"))

            /**
            * Filter out all elements whose namespaced `href` attribute doesn't
            * start with `#` (i.e. all non-relative IRI's)
            *
            * Note: we're assuming the `xlink` prefix for the XLink namespace!
            */
            .filter(function(element) {
                return (element.getAttribute("xlink:href").indexOf("#") === 0);
            })

            /**
            * Prepend `window.location` to the namespaced `href` attribute value,
            * in order to make it an absolute IRI
            *
            * Note: we're assuming the `xlink` prefix for the XLink namespace!
            */
            .forEach(function(element) {
                element.setAttribute("xlink:href", baseUrl + element.getAttribute("xlink:href"));
            });

    }, false);

}(document, window));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VwYXJzZXItMC4xLjMubWluLmpzIiwic3ZnZml4ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibGlicy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBcbiAqIEFqYXhQYWdlUGFyc2VyIGpRdWVyeSBQbHVnaW5cbiAqIE1hZGUgYnkgRXJpayBUZXJ3YW5cbiAqIDI4IFNlcHRlbWJlciAyMDE1IC0gMC4xLjNcbiAqIFxuICogVGhpcyBwbHVnaW4gaXMgcHJvdmlkZWQgYXMtaXMgYW5kIHJlbGVhc2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbiBcbiFmdW5jdGlvbih0KXt0LmZuLnBhZ2VQYXJzZXI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gaSgpe2lmKHUuZWFjaChmdW5jdGlvbihlKXt2YXIgaT10KHRoaXMpO3QodGhpcykuYXR0cihcImRhdGEtcHBpZFwiLGUrMSksdCh0aGlzKS5vbihhLnRyaWdnZXIsZnVuY3Rpb24odCl7cmV0dXJuIG4oaSksdC5wcmV2ZW50RGVmYXVsdCgpLCExfSl9KSxudWxsIT1hLmluaXRpYWxFbGVtZW50JiZhLmR5bmFtaWNVcmwpe2w9ITA7dmFyIGU9dChhLmluaXRpYWxFbGVtZW50KS5hdHRyKGEudXJsQXR0cmlidXRlKSxpPXtuYW1lOmUscGFnZTpkb2N1bWVudC50aXRsZSxpZDp0KGEuaW5pdGlhbEVsZW1lbnQpLmF0dHIoXCJkYXRhLXBwaWRcIil9O2hpc3RvcnkucHVzaFN0YXRlKGksZG9jdW1lbnQudGl0bGUsZSl9cmV0dXJuIHQod2luZG93KS5vbihcInBvcHN0YXRlXCIsZnVuY3Rpb24oKXtoaXN0b3J5LnN0YXRlJiYobCYmMCE9cj90KFwiKltkYXRhLXBwaWQ9XCIraGlzdG9yeS5zdGF0ZS5pZCtcIl1cIikubGVuZ3RoPjAmJm4odChcIipbZGF0YS1wcGlkPVwiK2hpc3Rvcnkuc3RhdGUuaWQrXCJdXCIpLCEwKTpyPTEpfSksdX1mdW5jdGlvbiBuKGUsaSl7YS5iZWZvcmUuY2FsbChlKTt2YXIgbj1lLmF0dHIoYS51cmxBdHRyaWJ1dGUpLHI9bixsPWUuYXR0cihcImRhdGEtcHBpZFwiKTtudWxsIT1hLnBhcnNlRWxlbWVudCYmKHIrPVwiIFwiK2EucGFyc2VFbGVtZW50KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dChhLmNvbnRhaW5lcikubG9hZChyLGZ1bmN0aW9uKHQsdSxvKXtpZihcInN1Y2Nlc3NcIj09dSl7dmFyIHM9dC5zcGxpdChcInRpdGxlPlwiKTtzPXNbMV0uc3BsaXQoXCI8L1wiKTt2YXIgYz1zWzBdO2lmKGEuZHluYW1pY1VybCYmMSE9aSl7dmFyIGQ9e25hbWU6cixwYWdlOmMsaWQ6bH07aGlzdG9yeS5wdXNoU3RhdGUoZCxjLG4pfWEuc2V0VGl0bGUmJihkb2N1bWVudC50aXRsZT1jKSxhLmZpbmlzaGVkLmNhbGwoZSl9ZWxzZVwiZXJyb3JcIj09dSYmYS5lcnJvci5jYWxsKG8uc3RhdHVzKX0pfSxhLmxvYWREZWxheSl9dmFyIGE9dC5leHRlbmQoe2NvbnRhaW5lcjpudWxsLGR5bmFtaWNVcmw6ITAsaW5pdGlhbEVsZW1lbnQ6bnVsbCxwYXJzZUVsZW1lbnQ6bnVsbCxzZXRUaXRsZTohMCx0cmlnZ2VyOlwiY2xpY2tcIix1cmxBdHRyaWJ1dGU6XCJocmVmXCIsbG9hZERlbGF5Om51bGwsYmVmb3JlOmZ1bmN0aW9uKCl7fSxmaW5pc2hlZDpmdW5jdGlvbigpe30sZXJyb3I6ZnVuY3Rpb24oKXt9fSxlKSxyPTAsbD0hMSx1PXRoaXM7cmV0dXJuIGkoKX19KGpRdWVyeSk7IiwiLyoqXG4gKiBTVkcgRml4ZXJcbiAqXG4gKiBGaXhlcyByZWZlcmVuY2VzIHRvIGlubGluZSBTVkcgZWxlbWVudHMgd2hlbiB0aGUgPGJhc2U+IHRhZyBpcyBpbiB1c2UuXG4gKiBGaXJlZm94IHdvbid0IGRpc3BsYXkgU1ZHIGljb25zIHJlZmVyZW5jZWQgd2l0aFxuICogYDxzdmc+PHVzZSB4bGluazpocmVmPVwiI2lkLW9mLWljb24tZGVmXCI+PC91c2U+PC9zdmc+YCB3aGVuIHRoZSA8YmFzZT4gdGFnIGlzIG9uIHRoZSBwYWdlLlxuICpcbiAqIE1vcmUgaW5mbzpcbiAqIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTgyNjUzMzYvNzk2MTUyXG4gKiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9saW5raW5nLmh0bWxcbiAqXG4gKiBPbmUgd291bGQgdGhpbmsgdGhhdCBzZXR0aW5nIHRoZSBgeG1sOmJhc2VgIGF0dHJpYnV0ZSBmaXhlcyB0aGluZ3MsXG4gKiBidXQgdGhhdCBpcyBiZWluZyByZW1vdmVkIGZyb20gdGhlIHBsYXRmb3JtOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzQxODU0XG4gKi9cblxuKGZ1bmN0aW9uKGRvY3VtZW50LCB3aW5kb3cpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8qKlxuICAgICogSW5pdGlhbGl6ZSB0aGUgU1ZHIEZpeGVyIGFmdGVyIHRoZSBET00gaXMgcmVhZHlcbiAgICAqL1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IFVSTCwgd2l0aG91dCB0aGUgaGFzaFxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGJhc2VVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgICAgICAgICAgLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhhc2gsIFwiXCIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAqICBGaW5kIGFsbCBgdXNlYCBlbGVtZW50cyB3aXRoIGEgbmFtZXNwYWNlZCBgaHJlZmAgYXR0cmlidXRlLCBlLmcuXG4gICAgICAgICogIDx1c2UgeGxpbms6aHJlZj1cIiNzb21lLWlkXCI+PC91c2U+XG4gICAgICAgICpcbiAgICAgICAgKiAgU2VlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMzA0Nzg4OC83OTYxNTJcbiAgICAgICAgKi9cbiAgICAgICAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwidXNlWyp8aHJlZl1cIikpXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBGaWx0ZXIgb3V0IGFsbCBlbGVtZW50cyB3aG9zZSBuYW1lc3BhY2VkIGBocmVmYCBhdHRyaWJ1dGUgZG9lc24ndFxuICAgICAgICAgICAgKiBzdGFydCB3aXRoIGAjYCAoaS5lLiBhbGwgbm9uLXJlbGF0aXZlIElSSSdzKVxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBOb3RlOiB3ZSdyZSBhc3N1bWluZyB0aGUgYHhsaW5rYCBwcmVmaXggZm9yIHRoZSBYTGluayBuYW1lc3BhY2UhXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChlbGVtZW50LmdldEF0dHJpYnV0ZShcInhsaW5rOmhyZWZcIikuaW5kZXhPZihcIiNcIikgPT09IDApO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFByZXBlbmQgYHdpbmRvdy5sb2NhdGlvbmAgdG8gdGhlIG5hbWVzcGFjZWQgYGhyZWZgIGF0dHJpYnV0ZSB2YWx1ZSxcbiAgICAgICAgICAgICogaW4gb3JkZXIgdG8gbWFrZSBpdCBhbiBhYnNvbHV0ZSBJUklcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogTm90ZTogd2UncmUgYXNzdW1pbmcgdGhlIGB4bGlua2AgcHJlZml4IGZvciB0aGUgWExpbmsgbmFtZXNwYWNlIVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcInhsaW5rOmhyZWZcIiwgYmFzZVVybCArIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwieGxpbms6aHJlZlwiKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgIH0sIGZhbHNlKTtcblxufShkb2N1bWVudCwgd2luZG93KSk7XG4iXX0=
