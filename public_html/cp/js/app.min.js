var app = app || {};

(function(body){
    "use strict";

    app = {
        
        init: function()
        {
            this.history.init();
            
            // var container = document.querySelector('.gallery');

            // container.addEventListener('click', function(e) {
            //   if (e.target != e.currentTarget) {
            //     e.preventDefault();
            //     // e.target is the image inside the link we just clicked.
            //   }
            //   e.stopPropagation();
            // }, false);

            // window.addEventListener('popstate', function(e) {
            //   // e.state is equal to the data-attribute of the last image we clicked
            // });
        }

    };

})(document.body);

// cookie.set({
//    key1: 'value1',
//    key2: 'value2'
// });

// cookie.set('key', 'value', {
//    expires: 7, // expires in one week
// });

// cookie.set({
//    key1: 'value1',
//    key2: 'value2'
// }, {
//    expires: 7
// })

// cookie.defaults.expires = 7;
// cookie.defaults.secure = true;


// cookie.expiresMultiplier = 60; // Seconds.
// cookie.expiresMultiplier = 60 * 60; // Minutes.
// cookie.expiresMultiplier = 60 * 60 * 24; // Hours.


// cookie.get('key');

// cookie.get(['key1', 'key2']);

// cookie.get('key', 'default value');
// cookie.get(['key1', 'key2'], 'default value');


// cookie.get('key');
// // is the same as
// cookie('key');

// var cookies = cookie.all();

// cookie.remove('key');
// cookie.remove('key1', 'key2');
// cookie.remove(['key1', 'key2']);

// if (cookie.enabled()) {
//    // Do stuff with cookies
// } else {
//    // Display error message or use localStorage
// }


// cookie.set('a', '1');
// cookie.setDefault({
//    a: '2',
//    b: '2'
// });

// cookie.get(['a', 'b']); // {a: "1", b: "2"}

// cookie.set('a', 'b', { path: '/somepath' });

// // This won't work
// cookie.remove('a');

// // You have to do this
// cookie.removeSpecific('a', { path: '/somepath' });

// // You can also give an array of cookie keys
// cookie.removeSpecific(['a', 'b'], { path: '/somepath' });

// cookie.empty().set('key1', 'value1').set('key2', 'value2').remove('key1');

// cookie.utils.decode = function (value) {
//    return decodeURIComponent(value).replace('+', ' ');
// };

var app = app || {};

(function(body){
    "use strict";

    // // Prepare
    // var History = window.History; // Note: We are using a capital H instead of a lower h
    // if ( !History.enabled ) {
    //      // History.js is disabled for this browser.
    //      // This is because we can optionally choose to support HTML4 browsers or not.
    //     return false;
    // }

    // // Bind to StateChange Event
    // History.Adapter.bind(window,'statechange',function() { // Note: We are using statechange instead of popstate
    //     var State = History.getState();
    //     $('#content').load(State.url);
    //     /* Instead of the line above, you could run the code below if the url returns the whole page instead of just the content (assuming it has a `#content`): */
    //     $.get(State.url, function(response) {
    //         $('#content').html($(response).find('#content').html()); });
    //     });


    // // Capture all the links to push their url to the history stack and trigger the StateChange Event
    // $('a').click(function(evt) {
    //     evt.preventDefault();
    //     History.pushState(null, $(this).text(), $(this).attr('href'));
    // });

    app.history = {
        
        init: function()
        {
            // function requestContent(file) {
            //   $('.wrapper__content').load(file + ' .wrapper__content');
            // }

            // window.addEventListener('popstate', function(e) {
            //   var character = e.state;

            //   if (character == null) {
            //     removeCurrentClass();
            //     textWrapper.innerHTML = " ";
            //     content.innerHTML = " ";
            //     document.title = defaultTitle;
            //   } else {
            //       updateText(character);
            //       requestContent(character + ".html");
            //       addCurrentClass(character);
            //       document.title = "Ghostbuster | " + character;
            //   }
            // });

            History = window.history;

            console.log(window.History, History, History.enabled);

            window.history.pushState({}, null, '/cp/site/edik');

            // // Bind to StateChange Event
            History.Adapter.bind(window,'statechange',function(){ // Note: We are using statechange instead of popstate
                var State = History.getState(); // Note: We are using History.getState() instead of event.state
            });

            // // Change our States
            History.pushState({state:1}, "State 1", "?state=1"); // logs {state:1}, "State 1", "?state=1"
            History.pushState({state:2}, "State 2", "?state=2"); // logs {state:2}, "State 2", "?state=2"
            History.replaceState({state:3}, "State 3", "?state=3"); // logs {state:3}, "State 3", "?state=3"
            History.pushState(null, null, "?state=4"); // logs {}, '', "?state=4"
            History.back(); // logs {state:3}, "State 3", "?state=3"
            History.back(); // logs {state:1}, "State 1", "?state=1"
            History.back(); // logs {}, "Home Page", "?"
            History.go(2); // logs {state:3}, "State 3", "?state=3"
            
            /*  Инициализируем контейнер для записей */
            var $entries = $(".wrapper__content");

            /* Вешаем обработчики onlick на ссылки */
            var $page_links = $(".nav"),
                $prev_link = $page_links.find("a.nav__item__link"),
                $next_link = $page_links.find("a.nav__item__link");
            $page_links.delegate("a", "click", function (e) {
                e.preventDefault();
                var url = $(this).attr("href");

                /*  Удаляем текущие записи из контейнера */
                $entries.empty();

                /*  Показываем индикатор загрузки */
                $entries.addClass("loading");

                /*  И сообщаем History.js об изменении состояния страницы
                В качестве первого агрумента можно передать произвольный объект
                с дополнительными данными, которые можно извлечь в обработчике
                изменения состояния, описанном ниже.
                В нашем случае это будет пустой объект. */
                History.pushState({}, null, url);
            });

            /*  Готовим обработчик изменения состояния страницы */
            History.Adapter.bind(window, "statechange", function () {
                /*  Получаем информацию о состоянии страницы */
                var state = History.getState();

                /* Получаем URL нового состояния. Это URL, который мы передали
                в .pushState() */
                var url = state.url;

                /*  Тут можно извлечь дополнительные данные, о которых шла речь выше.
                Например, так: var data = state.data; */

                /*  Отправляем AJAX-запрос на сервер.
                В качестве ответа мы ожидаем JSON-объект следующего формата:
                {entries: "<article><h1>...</h1>...</article> <article>...",
                 title: "Страница 3",
                 next_url: "/blog/page/4",
                 prev_url: "/blog/page/2" }
                Каким образом будет сформирован этот ответ, зависит только от вас. */
                $.getJSON(url, function (response) {

                    /*  Обновляем заголовок страницы */
                    $("title").text(response.title);

                    /*  Обновляем ссылки на предыдущую и следующую страницы */
                    $prev_link.attr("href", response.prev_url);
                    $next_link.attr("href", response.next_url);

                    /*  И, наконец, показываем новый блок записей */
                    $entries.removeClass("loading").html(response.entries);
                });
            });
        }

    };

})(document.body);

// (function(window,undefined){

//     // Check Location
//     if ( document.location.protocol === 'file:' ) {
//         alert('The HTML5 History API (and thus History.js) do not work on files, please upload it to a server.');
//     }

//     // Establish Variables
//     var
//         History = window.History, // Note: We are using a capital H instead of a lower h
//         State = History.getState(),
//         $log = $('#log');

//     // Log Initial State
//     History.log('initial:', State.data, State.title, State.url);

//     // Bind to State Change
//     History.Adapter.bind(window,'statechange',function(){ // Note: We are using statechange instead of popstate
//         // Log the State
//         var State = History.getState(); // Note: We are using History.getState() instead of event.state
//         History.log('statechange:', State.data, State.title, State.url);
//     });

//     // Prepare Buttons
//     var
//         buttons = document.getElementById('buttons'),
//         scripts = [
//             'History.pushState({state:1,rand:Math.random()}, "State 1", "?state=1"); // logs {state:1,rand:"some random value"}, "State 1", "?state=1"',
//             'History.pushState({state:2,rand:Math.random()}, "State 2", "?state=2"); // logs {state:2,rand:"some random value"}, "State 2", "?state=2"',
//             'History.replaceState({state:3,rand:Math.random()}, "State 3", "?state=3"); // logs {state:3,rand:"some random value"}, "State 3", "?state=3"',
//             'History.pushState(null, null, "?state=4"); // logs {}, "", "?state=4"',
//             'History.back(); // logs {state:3}, "State 3", "?state=3"',
//             'History.back(); // logs {state:1}, "State 1", "?state=1"',
//             'History.back(); // logs {}, "The page you started at", "?"',
//             'History.go(2); // logs {state:3}, "State 3", "?state=3"'
//         ],
//         buttonsHTML = ''
//         ;

//     // Add Buttons
//     for ( var i=0,n=scripts.length; i<n; ++i ) {
//         var _script = scripts[i];
//         buttonsHTML +=
//             '<li><button onclick=\'javascript:'+_script+'\'>'+_script+'</button></li>';
//     }
//     buttons.innerHTML = buttonsHTML;

// })(window);
var app = app || {};

(function(body){
    "use strict";

    app.preload = {

        preload: function($image)
        {
            var url = $image.data('preload'), image = null;

            try {
                image = new Image();
                image.onload = function() {
                    $image.attr('src', url);
                };
                image.src = url;
            }
            catch (e) {
                $image.attr('src', url);
            }
            
            $image.removeAttr('width height');
            $image.data('preload', '');
        },

        init: function()
        {
            if ($('img[data-preload]').length)
            {
                var _this = this;
            
                $('img[data-preload]').each(function(){
                    (function($image){
                        _this.preload($image);
                    })($(this))
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.quantity = {

        config: {
            element: '.j-quantity',
            input: '.j-quantity-count',
            control: '.j-quantity-control',
            complete: null
        },

        element: null,

        extend: function(config)
        {
            var _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        setValue: function(quantity)
        {
            var min = 1, max = 100;

            if (this.element.data('min')) {
                min = this.element.data('min');   
            }
            
            if (this.element.data('max')) {
                max = this.element.data('max');   
            }

            if (quantity > max) {
                quantity = max;
            }
            
            if (quantity < min) {
                quantity = min;
            }

            this.element.find(this.config.input).val(quantity);

        },

        increase: function(quantity)
        {
            quantity += 1;

            this.setValue(quantity);
        },

        decrease: function(quantity)
        {
            if (quantity > 1) {
                quantity -= 1;
            }

            this.setValue(quantity);
        },

        callback: function()
        {
            if (typeof(this.element.data('product')) !== 'undefined' && typeof(this.config.complete) == 'function')
            {
                this.config.complete.call(null, this.element, this.element.data('product'));
            }
        },

        keys: function()
        {
            var _this = this, role = '';

            $('body').on('keydown', _this.config.input, function(e) {
                if ([38, 40].indexOf(e.keyCode) >= 0)
                {
                    e.preventDefault();

                    role = {
                        38: 'increase',
                        40: 'decrease'
                    };

                    _this.element = $(this).closest(_this.config.element);

                    _this[role[e.keyCode]](parseInt(_this.element.find(_this.config.input).val()));

                    _this.callback();

                    return false;
                }
            });
        },

        bind: function()
        {
            var _this = this, role = '';

            $('body').on('click', _this.config.control, function(e) {
                e.preventDefault();

                _this.element = $(this).closest(_this.config.element);

                role = $(this).data('role');
         
                if(['increase', 'decrease'].indexOf(role) >= 0)
                {
                    _this[role](parseInt(_this.element.find(_this.config.input).val()));
                }

                _this.callback();

                return !1;
            });
        },

        init: function(config)
        {
            if (typeof config !== 'undefined')
            {
                this.extend(config);
            }

            this.bind();
            this.keys();
        }

    };

})(document.body);

// this.quantity.init({
//     complete: function(element, id) {
//         // $(element).css({
//         //     'border': '1px solid lime'
//         // });

//         console.log("id :", id);
//     }
// });

// <div class="quantity j-quantity clearfix" data-product="1000" data-min="1" data-max="999">
//     <button type="button" class="quantity__control _decrease j-quantity-control" data-role="decrease"></button>
//     <input type="text" name="count[1000]" value="1" data-role="quantity-input" class="quantity__count j-quantity-count" maxlength="3" autocomplete="off">
//     <button type="button" class="quantity__control _increase j-quantity-control" data-role="increase"></button>
// </div>
var app = app || {};

;(function(body){
    "use strict";

    var _this;

    app.sandwich = {

        config: {
            keyHooks: !1,
            selector: '.js-sandwich-menu',
            wrapper: '.layout-wrapper',
            overlay: '.overlay'
        },

        extend: function(config)
        {
            _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        isOpen: function()
        {
            return $('body').hasClass('page-visible');
        },

        hide: function()
        {
            $('body').removeClass('page-open');

            setTimeout(function(){
                $('body').removeClass('page-visible');
            }, 10);

            $(this.config.overlay).css({
                'visibility': 'hidden'
            });
        },

        toggle: function()
        {
            if ($('body').hasClass('page-visible'))
            {
                $('body').removeClass('page-open');

                setTimeout(function(){
                    $('body').removeClass('page-visible');
                }, 200);
            }
            else
            {
                $('body').addClass('page-open');

                setTimeout(function(){
                    $('body').addClass('page-visible');
                }, 10);
            }

            var visibility = 'visible';

            if (!$('body').hasClass('page-open'))
            {
                visibility = 'hidden'
            }
            
            $(_this.config.overlay).css({
                'visibility': visibility
            });
        },

        sandwichTrigger: function()
        {
            _this = this;

            if (_this.config.keyHooks)
            {
                $('body').on('keydown', function(e) {
                    if(e.keyCode == 27 && _this.isOpen())
                    {
                        _this.toggle();
                    }
                });
            };

            $('body').on('click', _this.config.selector, function(e){
                e.preventDefault ? e.preventDefault() : e.returnValue = false;
                _this.toggle();
            });
        },

        overlayTrigger: function()
        {
            _this = this;

            $('body').on('click', _this.config.overlay, function(e){
                _this.hide();
            });
        },

        init: function(config)
        {
            this.extend(config);
            this.sandwichTrigger();
            this.overlayTrigger();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.tabs = {

        init: function() {
            var $wrapper = null, tab = '';

            $('body').on('click', '.j-tab-trigger', function(e){
                e.preventDefault();

                if (!$(this).hasClass('_open')) {
                    tab = $(this).data('tab');

                    $wrapper = $(this).closest('.j-tab-wrapper');

                    $wrapper.find('.j-tab-trigger').removeClass('_current');
                    $wrapper.find('.j-tab-item').removeClass('_open');

                    $wrapper.find('#tab-'+tab).addClass('_open');
                    $(this).addClass('_current');
                }

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.toggle = {
        
        init: function() {
            
            var $toggle = null, text = '', hide = true, remove = false;

            $('body').on('click', '.j-toggle-trigger', function(e){
                e.preventDefault();

                $toggle = $(this).closest('.j-toggle').find('.j-toggle-item');

                if ($toggle)
                {
                    $toggle.toggleClass('is-show');
                }

                if ($toggle.hasClass('is-hidden'))
                {
                    $toggle.removeClass('is-hidden');
                }

                if ($(this).data('toggle-text')) {
                    text = $(this).data('toggle-text');
                }

                if (typeof($(this).data('remove')) !== 'undefined') {
                    remove = $(this).data('remove') == '0' ? false : ($(this).data('remove') == '1' ? true : false);
                }
                
                if (hide) {
                    $(this).hide();
                }
                
                if (remove) {
                    $(this).remove();
                }

                if (text) {
                    $(this).data('toggle-text', $(this).html());
                    $(this).html(text);
                }

                return false;
            })

        }

    };

})(document.body);

// <div class="j-toggle">
//     <div class="j-toggle-item"> content </div>
//     <span class="j-toggle-trigger" data-toggle-text="Скрыть..." data-hide="1" data-remove="1">Еще...</span>
// </div>
"use strict";

function __() {try {for(var i=0; i<arguments.length; i++) {console.log(arguments[i]);}}catch (e) {}}

function sprintf(v) {
  var split = v.toString().split('.'), pad = "00", time = [], x = null;

  for (x in split) {
    time.push(pad.substring(0, 2 - split[x].toString().length) + split[x]);
  }

  return time.join('.');
}
$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
